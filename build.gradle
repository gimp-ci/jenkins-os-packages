buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.0.0'
    }
}

//RPM package building
apply plugin: 'nebula.ospackage'

//gradle plugins
apply plugin: 'maven'

//default
defaultTasks 'getjenkins', 'getplugins'

//imports
import org.apache.tools.ant.filters.ReplaceTokens
import org.redline_rpm.header.Flags

//http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
//generate gradlew with: gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}


//perhaps use JENKINS_HOME some day
//avoiding JENKINS_HOME because I only want to copy if file doesn't exist
//by default the copy function will overwrite plugins in JENKINS_HOME if the hash is different
ext.bootstrapHome = System.getenv('BOOTSTRAP_HOME')?:'.'
ext.pluginsDest = bootstrapHome
ext.jenkinsDest = bootstrapHome
//tokens for Jenkins packaging
//note: tokens do not auto-correct when rpm prefix is customized during install
ext.tokens = [
  ARTIFACTNAME: System.getenv('ARTIFACTNAME')?:'jenkins',
  AUTHOR: System.getenv('AUTHOR')?:'Sam Gleske <sam.mxracer@gmail.com>',
  CAMELARTIFACTNAME: System.getenv('CAMELARTIFACTNAME')?:'Jenkins',
  CHANGELOG_PAGE: System.getenv('CHANGELOG_PAGE')?:'http://jenkins.io/changelog',
  COMMIT: ['git', 'rev-parse', 'HEAD'].execute().text.toString().trim(),
  HOME: System.getenv('JENKINS_HOME')?:'/var/lib/jenkins', //JENKINS_HOME
  HOMEPAGE: System.getenv('HOMEPAGE')?:'https://github.com/gimp-ci/jenkins-os-packages',
  LICENSE: 'MIT/X License, GPL/CDDL, ASL2',
  LICENSE_FILE: System.getenv('LICENSE_FILE')?:'LICENSE',
  MANIFEST: 'jenkins-versions.manifest',
  PACKAGENAME: System.getenv('PACKAGENAME')?:'jenkins-bootstrap',
  PORT: System.getenv('PORT')?:'8080',
  PREFIX: '/usr',
  PRODUCTNAME: 'Jenkins',
  SUMMARY: System.getenv('SUMMARY')?:'Jenkins Continuous Integration Server',
  USER: System.getenv('JENKINS_USER')?:'jenkins',
  VENDOR: System.getenv('VENDOR')?:'jenkins-bootstrap by Sam Gleske'
]
ext.tokens['WAR'] = "${ext.tokens['PREFIX']}/lib/${ext.tokens['ARTIFACTNAME']}/${ext.tokens['ARTIFACTNAME']}.war".toString()

//version of Jenkins to download
version = '2.7.4'
ext.releaseVersion = '0'
description = "Built from jenkins-bootstrap-jervis @ ${tokens['COMMIT']}"

configurations {
    getplugins {
        description = 'Download Jenkins plugins .jpi files.'
        transitive = false
    }
    getjenkins {
        description = 'Download Jenkins WAR file.'
        transitive = false
    }
}
repositories {
    maven {
        name 'jenkins'
        delegate.url('https://repo.jenkins-ci.org/public/')
    }
}
dependencies {
    //get Jenkins
    getjenkins "org.jenkins-ci.main:jenkins-war:${version}@war"

    //get plugins
    getplugins 'com.coravy.hudson.plugins.github:github:1.22.1@hpi'
    getplugins 'org.jenkins-ci.main:maven-plugin:2.13@hpi'
    getplugins 'org.jenkins-ci.plugins.icon-shim:icon-shim:2.0.3@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.3@hpi'
    getplugins 'org.jenkins-ci.plugins:all-changes:1.4@hpi'
    getplugins 'org.jvnet.hudson.plugins:analysis-collector:1.48@hpi'
    getplugins 'org.jvnet.hudson.plugins:analysis-core:1.79@hpi'
    getplugins 'org.jenkins-ci.plugins:ant:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:antisamy-markup-formatter:1.5@hpi'
    getplugins 'net.hurstfrost.jenkins:avatar:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:bouncycastle-api:2.16.0@hpi'
    getplugins 'org.jenkins-ci.plugins:build-blocker-plugin:1.7.3@hpi'
    getplugins 'org.jvnet.hudson.plugins:checkstyle:3.46@hpi'
    getplugins 'org.jenkins-ci.plugins:clamav:0.3@hpi'
    getplugins 'org.jenkins-ci.plugins:conditional-buildstep:1.3.5@hpi'
    getplugins 'org.jenkins-ci.plugins:console-column-plugin:1.5@hpi'
    getplugins 'org.jenkins-ci.plugins:copyartifact:1.38.1@hpi'
    getplugins 'org.jenkins-ci.plugins:credentials:2.1.6@hpi'
    getplugins 'org.jenkins-ci.plugins:cvs:2.12@hpi'
    getplugins 'org.jenkins-ci.plugins:dashboard-view:2.9.10@hpi'
    getplugins 'org.jenkins-ci.plugins:description-column-plugin:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:description-setter:1.10@hpi'
    getplugins 'org.jenkins-ci.plugins:disk-usage:0.28@hpi'
    getplugins 'org.jenkins-ci.plugins:display-url-api:0.3@hpi'
    getplugins 'org.jenkinsci.plugins:doclinks:0.6.1@hpi'
    getplugins 'org.jvnet.hudson.plugins:dry:2.45@hpi'
    getplugins 'org.jvnet.hudson.plugins:extended-read-permission:1.0@hpi'
    getplugins 'org.jenkins-ci.plugins:external-monitor-job:1.6@hpi'
    getplugins 'org.jenkins-ci.plugins:extra-columns:1.17@hpi'
    getplugins 'org.jenkins-ci.plugins:git-client:2.0.0@hpi'
    getplugins 'org.jenkins-ci.plugins:git:3.0.0@hpi'
    getplugins 'org.jenkins-ci.plugins:github-api:1.77@hpi'
    getplugins 'org.jenkins-ci.plugins:greenballs:1.15@hpi'
    getplugins 'org.jvnet.hudson.plugins:instant-messaging:1.35@hpi'
    getplugins 'org.jvnet.hudson.plugins:ircbot:2.27@hpi'
    getplugins 'org.jenkins-ci.plugins:javadoc:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:jobConfigHistory:2.15@hpi'
    getplugins 'org.jenkins-ci.plugins:junit:1.18@hpi'
    getplugins 'org.jenkins-ci.plugins:ldap:1.12@hpi'
    getplugins 'org.jenkins-ci.plugins:log-parser:2.0@hpi'
    getplugins 'org.jenkins-ci.plugins:mailer:1.18@hpi'
    getplugins 'org.jenkins-ci.plugins:mapdb-api:1.0.9.0@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-auth:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-project:1.7.1@hpi'
    getplugins 'org.jvnet.hudson.plugins:monitoring:1.60.0@hpi'
    getplugins 'org.jenkins-ci.plugins:pam-auth:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:parameterized-trigger:2.32@hpi'
    getplugins 'org.jenkins-ci.plugins:plain-credentials:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:rich-text-publisher-plugin:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:role-strategy:2.3.2@hpi'
    getplugins 'org.jenkins-ci.plugins:run-condition:1.0@hpi'
    getplugins 'org.jenkins-ci.plugins:saferestart:0.3@hpi'
    getplugins 'org.jenkins-ci.plugins:scm-api:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:script-security:1.22@hpi'
    getplugins 'org.jenkins-ci.plugins:shelve-project-plugin:1.5@hpi'
    getplugins 'org.jenkins-ci.plugins:sidebar-link:1.7@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-agent:1.13@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-credentials:1.12@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-slaves:1.11@hpi'
    getplugins 'org.jenkins-ci.plugins:structs:1.5@hpi'
    getplugins 'org.jenkins-ci.plugins:subversion:2.6@hpi'
    getplugins 'org.jenkins-ci.plugins:text-finder:1.10@hpi'
    getplugins 'org.jvnet.hudson.plugins:thinBackup:1.7.4@hpi'
    getplugins 'org.jenkins-ci.plugins:token-macro:1.12.1@hpi'
    getplugins 'org.jenkins-ci.plugins:translation:1.15@hpi'
    getplugins 'org.jvnet.hudson.plugins:warnings:4.56@hpi'
    getplugins 'org.jenkins-ci.plugins:windows-slaves:1.2@hpi'
}
//download and copy specific versions of plugins
task getplugins(type: Copy) {
    into "${pluginsDest}/plugins"
    from configurations.getplugins
    include '*.hpi'
    rename '(.*)-[.0-9]+.hpi$', '$1.jpi'
}

//download and copy a specific version of Jenkins
task getjenkins(type: Copy) {
    //println configurations.getjenkins
    into jenkinsDest
    from configurations.getjenkins
    include '*.war'
    rename '.*', 'jenkins.war'
}

//Operating System packages
//I want to package the exact version of Jenkins plus all exact versions of plugins together
task filterPackagingScripts(type: Copy) {
    from "${rootProject.projectDir}/packaging"
    into "${buildDir}/packaging-filtered"
    include '**/*.in'
    filter(ReplaceTokens, beginToken: '@@', endToken: '@@', tokens: tokens)
    filter(ReplaceTokens, beginToken: '~~', endToken: '~~', tokens: tokens)
    rename '(.*).in', '$1'
}

task createManifest {
    doLast {
        configurations.all.findAll { !it.allDependencies.empty }.each { c ->
            File file = new File("${buildDir}/${tokens['MANIFEST']}")
            c.allDependencies.each { dep ->
                file << ("${dep.group}:${dep.name}:${dep.version}\n")
            }
        }
    }
}
createManifest.mustRunAfter filterPackagingScripts

ospackage {
    packageName tokens['PACKAGENAME']
    packager tokens['AUTHOR']
    release releaseVersion
    url tokens['HOMEPAGE']
    into tokens['PREFIX']
    license tokens['LICENSE']

    //shared package name dependencies
    requires 'coreutils'
    requires 'grep'
    requires 'logrotate'
    requires 'procps'
    requires 'rsync'

    //only sign if properties exist
    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        signingKeyId project.getProperty('signing.keyId')
        signingKeyPassphrase project.getProperty('signing.password')
        signingKeyRingFile file(project.getProperty('signing.secretKeyRingFile'))
    }
    addParentDirs = true

    preInstall = file("${buildDir}/packaging-filtered/preInstall.sh")
    postInstall = file("${buildDir}/packaging-filtered/postInstall.sh")
    preUninstall = file("${buildDir}/packaging-filtered/preUninstall.sh")
    postUninstall = file("${buildDir}/packaging-filtered/postUninstall.sh")

    from(configurations.getjenkins) {
        into "lib/${tokens['ARTIFACTNAME']}"
        rename '.*', "${tokens['ARTIFACTNAME']}.war"
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from(configurations.getplugins) {
        into "lib/${tokens['ARTIFACTNAME']}/plugins"
        include '*.hpi'
        rename '(.*)-[.0-9]+.hpi$', '$1.jpi'
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from('scripts') {
        into "lib/${tokens['ARTIFACTNAME']}/scripts"
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from(tokens['LICENSE_FILE']) {
        into "lib/${tokens['ARTIFACTNAME']}"
        fileType LICENSE
        rename '.*', 'LICENSE'
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from('packaging/common/gitignore') {
        into "lib/${tokens['ARTIFACTNAME']}"
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from("${buildDir}/${tokens['MANIFEST']}") {
        into "lib/${tokens['ARTIFACTNAME']}"
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from("${buildDir}/packaging-filtered/share") {
        into "lib/${tokens['ARTIFACTNAME']}/share"
        user tokens['USER']
        permissionGroup tokens['USER']
    }
    from("${buildDir}/packaging-filtered/jenkins.logrotate") {
        into '/etc/logrotate.d'
        fileMode 0644
        fileType CONFIG
        rename '.*', tokens['ARTIFACTNAME']
    }
    from("${buildDir}/packaging-filtered/jenkins.cron") {
        into '/etc/cron.daily'
        fileMode 0755
        fileType CONFIG
        rename '.*', tokens['ARTIFACTNAME']
    }
}

buildRpm {
    packageGroup 'Development/Tools/Building'
    user 'root'
    permissionGroup 'root'
    type BINARY
    os LINUX
    addParentDirs = false
    prefix tokens['PREFIX']

    //how this package relates to other system packages
    obsoletes 'jenkins'
    obsoletes 'hudson'
    requires 'cronie'
    requires 'glibc-common'

    from("${buildDir}/packaging-filtered/rpm/jenkins.init") {
        into '/etc/init.d'
        fileMode 0755
        fileType CONFIG
        rename '.*', tokens['ARTIFACTNAME']
    }
    from("${buildDir}/packaging-filtered/rpm/jenkins.sysconfig") {
        addParentDirs = false
        into '/etc/sysconfig'
        fileMode 0600
        fileType CONFIG | NOREPLACE
        rename '.*', tokens['ARTIFACTNAME']
        user tokens['USER']
        permissionGroup tokens['USER']
    }
}
buildRpm.dependsOn createManifest, filterPackagingScripts

buildDeb {
    //packager is limited to only 32 chars for DEB files so only include email
    packager tokens['AUTHOR'].replaceAll(/[^<]+<([^>]+)>/, '$1')
    maintainer tokens['AUTHOR'].replaceAll(/[^<]+<([^>]+)>/, '$1')
    packageGroup 'devel'
    user 'root'
    permissionGroup 'root'

    priority 'extra'
    requires 'adduser'
    requires 'daemon'
    requires 'net-tools'
    requires 'psmisc'
    requires('default-jre-headless', '2:1.7', Flags.GREATER | Flags.EQUAL).or('java7-runtime-headless').or('openjdk-8-jdk').or('openjdk-8-jre-headless')
    conflicts 'hudson'
    conflicts 'jenkins'
    replaces 'hudson'
    replaces 'jenkins'
    from("${buildDir}/packaging-filtered/deb/jenkins.init") {
        into '/etc/init.d'
        fileMode 0755
        fileType CONFIG
        rename '.*', tokens['ARTIFACTNAME']
    }
    from("${buildDir}/packaging-filtered/deb/jenkins.default") {
        addParentDirs = false
        into '/etc/default'
        fileMode 0600
        fileType CONFIG | NOREPLACE
        rename '.*', tokens['ARTIFACTNAME']
        user tokens['USER']
        permissionGroup tokens['USER']
    }
}
buildDeb.dependsOn createManifest, filterPackagingScripts

//packages task to create all system packages
task packages
packages.dependsOn buildRpm, buildDeb

task cleanJenkins(type: Delete) {
    delete '.gradle'
    delete 'plugins'
    delete 'jenkins.war'
}

clean.dependsOn cleanJenkins
